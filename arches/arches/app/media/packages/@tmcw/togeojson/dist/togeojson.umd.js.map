{"version":3,"file":"togeojson.umd.js","sources":["../lib/shared.js","../lib/gpx.js","../lib/tcx.js","../lib/kml.js"],"sourcesContent":["// cast array x into numbers\n// get the content of a text node, if any\nexport function nodeVal(x) {\n  if (x && x.normalize) {\n    x.normalize();\n  }\n  return (x && x.textContent) || \"\";\n}\n\n// one Y child of X, if any, otherwise null\nexport function get1(x, y) {\n  const n = x.getElementsByTagName(y);\n  return n.length ? n[0] : null;\n}","import { nodeVal, get1 } from \"./shared\";\n\nfunction getLineStyle(extensions) {\n  const style = {};\n  if (extensions) {\n    const lineStyle = get1(extensions, \"line\");\n    if (lineStyle) {\n      const color = nodeVal(get1(lineStyle, \"color\")),\n        opacity = parseFloat(nodeVal(get1(lineStyle, \"opacity\"))),\n        width = parseFloat(nodeVal(get1(lineStyle, \"width\")));\n      if (color) style.stroke = color;\n      if (!isNaN(opacity)) style[\"stroke-opacity\"] = opacity;\n      // GPX width is in mm, convert to px with 96 px per inch\n      if (!isNaN(width)) style[\"stroke-width\"] = (width * 96) / 25.4;\n    }\n  }\n  return style;\n}\n\n// get the contents of multiple text nodes, if present\nfunction getMulti(x, ys) {\n  const o = {};\n  let n;\n  let k;\n  for (k = 0; k < ys.length; k++) {\n    n = get1(x, ys[k]);\n    if (n) o[ys[k]] = nodeVal(n);\n  }\n  return o;\n}\nfunction getProperties(node) {\n  const prop = getMulti(node, [\n    \"name\",\n    \"cmt\",\n    \"desc\",\n    \"type\",\n    \"time\",\n    \"keywords\",\n  ]);\n  // Parse additional data from our Garmin extension(s)\n  const extensions = node.getElementsByTagNameNS(\n    \"http://www.garmin.com/xmlschemas/GpxExtensions/v3\",\n    \"*\"\n  );\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    // Ignore nested extensions, like those on routepoints or trackpoints\n    if (extension.parentNode.parentNode === node) {\n      prop[extension.tagName.replace(\":\", \"_\")] = nodeVal(extension);\n    }\n  }\n  const links = node.getElementsByTagName(\"link\");\n  if (links.length) prop.links = [];\n  for (let i = 0; i < links.length; i++) {\n    prop.links.push(\n      Object.assign(\n        { href: links[i].getAttribute(\"href\") },\n        getMulti(links[i], [\"text\", \"type\"])\n      )\n    );\n  }\n  return prop;\n}\n\nfunction coordPair(x) {\n  const ll = [\n    parseFloat(x.getAttribute(\"lon\")),\n    parseFloat(x.getAttribute(\"lat\")),\n  ];\n  const ele = get1(x, \"ele\");\n  // handle namespaced attribute in browser\n  const heartRate = get1(x, \"gpxtpx:hr\") || get1(x, \"hr\");\n  const time = get1(x, \"time\");\n  let e;\n  if (ele) {\n    e = parseFloat(nodeVal(ele));\n    if (!isNaN(e)) {\n      ll.push(e);\n    }\n  }\n  const result = {\n    coordinates: ll,\n    time: time ? nodeVal(time) : null,\n    extendedValues: [],\n  };\n\n  if (heartRate) {\n    result.extendedValues.push([\"heartRate\", parseFloat(nodeVal(heartRate))]);\n  }\n\n  const extensions = get1(x, \"extensions\");\n  if (extensions !== null) {\n    for (const name of [\"speed\", \"course\", \"hAcc\", \"vAcc\"]) {\n      const v = parseFloat(nodeVal(get1(extensions, name)));\n      if (!isNaN(v)) {\n        result.extendedValues.push([name, v]);\n      }\n    }\n  }\n  return result;\n}\nfunction getRoute(node) {\n  const line = getPoints(node, \"rtept\");\n  if (!line) return;\n  return {\n    type: \"Feature\",\n    properties: Object.assign(\n      getProperties(node),\n      getLineStyle(get1(node, \"extensions\")),\n      { _gpxType: \"rte\" }\n    ),\n    geometry: {\n      type: \"LineString\",\n      coordinates: line.line,\n    },\n  };\n}\n\nfunction getPoints(node, pointname) {\n  const pts = node.getElementsByTagName(pointname);\n  if (pts.length < 2) return; // Invalid line in GeoJSON\n\n  const line = [];\n  const times = [];\n  const extendedValues = {};\n  for (let i = 0; i < pts.length; i++) {\n    const c = coordPair(pts[i]);\n    line.push(c.coordinates);\n    if (c.time) times.push(c.time);\n    for (let j = 0; j < c.extendedValues.length; j++) {\n      const [name, val] = c.extendedValues[j];\n      const plural = name + \"s\";\n      if (!extendedValues[plural]) {\n        extendedValues[plural] = Array(pts.length).fill(null);\n      }\n      extendedValues[plural][i] = val;\n    }\n  }\n  return {\n    line: line,\n    times: times,\n    extendedValues: extendedValues,\n  };\n}\n\nfunction getTrack(node) {\n  const segments = node.getElementsByTagName(\"trkseg\");\n  const track = [];\n  const times = [];\n  const extractedLines = [];\n\n  for (let i = 0; i < segments.length; i++) {\n    const line = getPoints(segments[i], \"trkpt\");\n    if (line) {\n      extractedLines.push(line);\n      if (line.times && line.times.length) times.push(line.times);\n    }\n  }\n\n  if (extractedLines.length === 0) return;\n\n  const multi = extractedLines.length > 1;\n\n  const properties = Object.assign(\n    getProperties(node),\n    getLineStyle(get1(node, \"extensions\")),\n    { _gpxType: \"trk\" },\n    times.length\n      ? {\n          coordTimes: multi ? times : times[0],\n        }\n      : {}\n  );\n\n  for (let i = 0; i < extractedLines.length; i++) {\n    const line = extractedLines[i];\n    track.push(line.line);\n    for (const [name, val] of Object.entries(line.extendedValues)) {\n      if (multi) {\n        if (!properties[name])\n          properties[name] = extractedLines.map((line) =>\n            new Array(line.line.length).fill(null)\n          );\n        properties[name][i] = val;\n      } else {\n        properties[name] = val;\n      }\n    }\n  }\n\n  return {\n    type: \"Feature\",\n    properties: properties,\n    geometry: multi\n      ? {\n          type: \"MultiLineString\",\n          coordinates: track,\n        }\n      : {\n          type: \"LineString\",\n          coordinates: track[0],\n        },\n  };\n}\n\nfunction getPoint(node) {\n  return {\n    type: \"Feature\",\n    properties: Object.assign(getProperties(node), getMulti(node, [\"sym\"])),\n    geometry: {\n      type: \"Point\",\n      coordinates: coordPair(node).coordinates,\n    },\n  };\n}\n\nexport function* gpxGen(doc) {\n  const tracks = doc.getElementsByTagName(\"trk\");\n  const routes = doc.getElementsByTagName(\"rte\");\n  const waypoints = doc.getElementsByTagName(\"wpt\");\n\n  for (let i = 0; i < tracks.length; i++) {\n    const feature = getTrack(tracks[i]);\n    if (feature) yield feature;\n  }\n  for (let i = 0; i < routes.length; i++) {\n    const feature = getRoute(routes[i]);\n    if (feature) yield feature;\n  }\n  for (let i = 0; i < waypoints.length; i++) {\n    yield getPoint(waypoints[i]);\n  }\n}\n\nexport function gpx(doc) {\n  return {\n    type: \"FeatureCollection\",\n    features: Array.from(gpxGen(doc)),\n  };\n}\n","import { nodeVal, get1 } from \"./shared\";\n\nconst EXTENSIONS_NS = \"http://www.garmin.com/xmlschemas/ActivityExtension/v2\";\n\nconst TRACKPOINT_ATTRIBUTES = [\n  [\"heartRate\", \"heartRates\"],\n  [\"Cadence\", \"cadences\"],\n  // Extended Trackpoint attributes\n  [\"Speed\", \"speeds\"],\n  [\"Watts\", \"watts\"],\n];\n\nconst LAP_ATTRIBUTES = [\n  [\"TotalTimeSeconds\", \"totalTimeSeconds\"],\n  [\"DistanceMeters\", \"distanceMeters\"],\n  [\"MaximumSpeed\", \"maxSpeed\"],\n  [\"AverageHeartRateBpm\", \"avgHeartRate\"],\n  [\"MaximumHeartRateBpm\", \"maxHeartRate\"],\n\n  // Extended Lap attributes\n  [\"AvgSpeed\", \"avgSpeed\"],\n  [\"AvgWatts\", \"avgWatts\"],\n  [\"MaxWatts\", \"maxWatts\"],\n];\n\nfunction fromEntries(arr) {\n  const obj = {};\n  for (const [key, value] of arr) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction getProperties(node, attributeNames) {\n  const properties = [];\n\n  for (const [tag, alias] of attributeNames) {\n    let elem = get1(node, tag);\n    if (!elem) {\n      const elements = node.getElementsByTagNameNS(EXTENSIONS_NS, tag);\n      if (elements.length) {\n        elem = elements[0];\n      }\n    }\n    const val = parseFloat(nodeVal(elem));\n    if (!isNaN(val)) {\n      properties.push([alias, val]);\n    }\n  }\n\n  return properties;\n}\n\nfunction coordPair(x) {\n  const lon = nodeVal(get1(x, \"LongitudeDegrees\"));\n  const lat = nodeVal(get1(x, \"LatitudeDegrees\"));\n  if (!lon.length || !lat.length) {\n    return null;\n  }\n  const ll = [parseFloat(lon), parseFloat(lat)];\n  const alt = get1(x, \"AltitudeMeters\");\n  const heartRate = get1(x, \"HeartRateBpm\");\n  const time = get1(x, \"Time\");\n  let a;\n  if (alt) {\n    a = parseFloat(nodeVal(alt));\n    if (!isNaN(a)) {\n      ll.push(a);\n    }\n  }\n  return {\n    coordinates: ll,\n    time: time ? nodeVal(time) : null,\n    heartRate: heartRate ? parseFloat(nodeVal(heartRate)) : null,\n    extensions: getProperties(x, TRACKPOINT_ATTRIBUTES),\n  };\n}\n\nfunction getPoints(node, pointname) {\n  const pts = node.getElementsByTagName(pointname);\n  const line = [];\n  const times = [];\n  const heartRates = [];\n  if (pts.length < 2) return null; // Invalid line in GeoJSON\n  const result = { extendedProperties: {} };\n  for (let i = 0; i < pts.length; i++) {\n    const c = coordPair(pts[i]);\n    if (c === null) continue;\n    line.push(c.coordinates);\n    if (c.time) times.push(c.time);\n    if (c.heartRate) heartRates.push(c.heartRate);\n    for (const [alias, value] of c.extensions) {\n      if (!result.extendedProperties[alias]) {\n        result.extendedProperties[alias] = Array(pts.length).fill(null);\n      }\n      result.extendedProperties[alias][i] = value;\n    }\n  }\n  return Object.assign(result, {\n    line: line,\n    times: times,\n    heartRates: heartRates,\n  });\n}\n\nfunction getLap(node) {\n  const segments = node.getElementsByTagName(\"Track\");\n  const track = [];\n  const times = [];\n  const heartRates = [];\n  const allExtendedProperties = [];\n  let line;\n  const properties = fromEntries(getProperties(node, LAP_ATTRIBUTES));\n  for (let i = 0; i < segments.length; i++) {\n    line = getPoints(segments[i], \"Trackpoint\");\n    if (line) {\n      track.push(line.line);\n      if (line.times.length) times.push(line.times);\n      if (line.heartRates.length) heartRates.push(line.heartRates);\n      allExtendedProperties.push(line.extendedProperties);\n    }\n  }\n  for (let i = 0; i < allExtendedProperties.length; i++) {\n    const extendedProperties = allExtendedProperties[i];\n    for (const property in extendedProperties) {\n      if (segments.length === 1) {\n        properties[property] = line.extendedProperties[property];\n      } else {\n        if (!properties[property]) {\n          properties[property] = track.map((track) =>\n            Array(track.length).fill(null)\n          );\n        }\n        properties[property][i] = extendedProperties[property];\n      }\n    }\n  }\n  if (track.length === 0) return;\n  if (times.length)\n    properties.coordTimes = track.length === 1 ? times[0] : times;\n  if (heartRates.length)\n    properties.heartRates = track.length === 1 ? heartRates[0] : heartRates;\n  return {\n    type: \"Feature\",\n    properties: properties,\n    geometry: {\n      type: track.length === 1 ? \"LineString\" : \"MultiLineString\",\n      coordinates: track.length === 1 ? track[0] : track,\n    },\n  };\n}\n\nexport function* tcxGen(doc) {\n  const laps = doc.getElementsByTagName(\"Lap\");\n\n  for (let i = 0; i < laps.length; i++) {\n    const feature = getLap(laps[i]);\n    if (feature) yield feature;\n  }\n}\n\nexport function tcx(doc) {\n  return {\n    type: \"FeatureCollection\",\n    features: Array.from(tcxGen(doc)),\n  };\n}\n","import { nodeVal, get1 } from \"./shared\";\n\nconst removeSpace = /\\s*/g;\nconst trimSpace = /^\\s*|\\s*$/g;\nconst splitSpace = /\\s+/;\n\n// generate a short, numeric hash of a string\nfunction okhash(x) {\n  if (!x || !x.length) return 0;\n  let h = 0;\n  for (let i = 0; i < x.length; i++) {\n    h = ((h << 5) - h + x.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n// get one coordinate from a coordinate array, if any\nfunction coord1(v) {\n  return v.replace(removeSpace, \"\").split(\",\").map(parseFloat);\n}\n\n// get all coordinates from a coordinate array as [[],[]]\nfunction coord(v) {\n  return v.replace(trimSpace, \"\").split(splitSpace).map(coord1);\n}\n\nfunction xml2str(node) {\n  if (node.xml !== undefined) return node.xml;\n  if (node.tagName) {\n    let output = node.tagName;\n    for (let i = 0; i < node.attributes.length; i++) {\n      output += node.attributes[i].name + node.attributes[i].value;\n    }\n    for (let i = 0; i < node.childNodes.length; i++) {\n      output += xml2str(node.childNodes[i]);\n    }\n    return output;\n  }\n  if (node.nodeName === \"#text\") {\n    return (node.nodeValue || node.value || \"\").trim();\n  }\n  if (node.nodeName === \"#cdata-section\") {\n    return node.nodeValue;\n  }\n  return \"\";\n}\n\nconst geotypes = [\"Polygon\", \"LineString\", \"Point\", \"Track\", \"gx:Track\"];\n\nfunction kmlColor(properties, elem, prefix) {\n  let v = nodeVal(get1(elem, \"color\")) || \"\";\n  const colorProp =\n    prefix == \"stroke\" || prefix === \"fill\" ? prefix : prefix + \"-color\";\n  if (v.substr(0, 1) === \"#\") {\n    v = v.substr(1);\n  }\n  if (v.length === 6 || v.length === 3) {\n    properties[colorProp] = v;\n  } else if (v.length === 8) {\n    properties[prefix + \"-opacity\"] = parseInt(v.substr(0, 2), 16) / 255;\n    properties[colorProp] =\n      \"#\" + v.substr(6, 2) + v.substr(4, 2) + v.substr(2, 2);\n  }\n}\n\nfunction numericProperty(properties, elem, source, target) {\n  const val = parseFloat(nodeVal(get1(elem, source)));\n  if (!isNaN(val)) properties[target] = val;\n}\n\nfunction gxCoords(root) {\n  let elems = root.getElementsByTagName(\"coord\");\n  const coords = [];\n  const times = [];\n  if (elems.length === 0) elems = root.getElementsByTagName(\"gx:coord\");\n  for (let i = 0; i < elems.length; i++) {\n    coords.push(nodeVal(elems[i]).split(\" \").map(parseFloat));\n  }\n  const timeElems = root.getElementsByTagName(\"when\");\n  for (let j = 0; j < timeElems.length; j++) times.push(nodeVal(timeElems[j]));\n  return {\n    coords: coords,\n    times: times,\n  };\n}\n\nfunction getGeometry(root) {\n  let geomNode;\n  let geomNodes;\n  let i;\n  let j;\n  let k;\n  const geoms = [];\n  const coordTimes = [];\n  if (get1(root, \"MultiGeometry\")) {\n    return getGeometry(get1(root, \"MultiGeometry\"));\n  }\n  if (get1(root, \"MultiTrack\")) {\n    return getGeometry(get1(root, \"MultiTrack\"));\n  }\n  if (get1(root, \"gx:MultiTrack\")) {\n    return getGeometry(get1(root, \"gx:MultiTrack\"));\n  }\n  for (i = 0; i < geotypes.length; i++) {\n    geomNodes = root.getElementsByTagName(geotypes[i]);\n    if (geomNodes) {\n      for (j = 0; j < geomNodes.length; j++) {\n        geomNode = geomNodes[j];\n        if (geotypes[i] === \"Point\") {\n          geoms.push({\n            type: \"Point\",\n            coordinates: coord1(nodeVal(get1(geomNode, \"coordinates\"))),\n          });\n        } else if (geotypes[i] === \"LineString\") {\n          geoms.push({\n            type: \"LineString\",\n            coordinates: coord(nodeVal(get1(geomNode, \"coordinates\"))),\n          });\n        } else if (geotypes[i] === \"Polygon\") {\n          const rings = geomNode.getElementsByTagName(\"LinearRing\"),\n            coords = [];\n          for (k = 0; k < rings.length; k++) {\n            coords.push(coord(nodeVal(get1(rings[k], \"coordinates\"))));\n          }\n          geoms.push({\n            type: \"Polygon\",\n            coordinates: coords,\n          });\n        } else if (geotypes[i] === \"Track\" || geotypes[i] === \"gx:Track\") {\n          const track = gxCoords(geomNode);\n          geoms.push({\n            type: \"LineString\",\n            coordinates: track.coords,\n          });\n          if (track.times.length) coordTimes.push(track.times);\n        }\n      }\n    }\n  }\n  return {\n    geoms: geoms,\n    coordTimes: coordTimes,\n  };\n}\n\nfunction getPlacemark(root, styleIndex, styleMapIndex, styleByHash) {\n  const geomsAndTimes = getGeometry(root);\n  let i;\n  const properties = {};\n  const name = nodeVal(get1(root, \"name\"));\n  const address = nodeVal(get1(root, \"address\"));\n  let styleUrl = nodeVal(get1(root, \"styleUrl\"));\n  const description = nodeVal(get1(root, \"description\"));\n  const timeSpan = get1(root, \"TimeSpan\");\n  const timeStamp = get1(root, \"TimeStamp\");\n  const extendedData = get1(root, \"ExtendedData\");\n  let iconStyle = get1(root, \"IconStyle\");\n  let labelStyle = get1(root, \"LabelStyle\");\n  let lineStyle = get1(root, \"LineStyle\");\n  let polyStyle = get1(root, \"PolyStyle\");\n  const visibility = get1(root, \"visibility\");\n\n  if (name) properties.name = name;\n  if (address) properties.address = address;\n  if (styleUrl) {\n    if (styleUrl[0] !== \"#\") {\n      styleUrl = \"#\" + styleUrl;\n    }\n\n    properties.styleUrl = styleUrl;\n    if (styleIndex[styleUrl]) {\n      properties.styleHash = styleIndex[styleUrl];\n    }\n    if (styleMapIndex[styleUrl]) {\n      properties.styleMapHash = styleMapIndex[styleUrl];\n      properties.styleHash = styleIndex[styleMapIndex[styleUrl].normal];\n    }\n    // Try to populate the lineStyle or polyStyle since we got the style hash\n    const style = styleByHash[properties.styleHash];\n    if (style) {\n      if (!iconStyle) iconStyle = get1(style, \"IconStyle\");\n      if (!labelStyle) labelStyle = get1(style, \"LabelStyle\");\n      if (!lineStyle) lineStyle = get1(style, \"LineStyle\");\n      if (!polyStyle) polyStyle = get1(style, \"PolyStyle\");\n    }\n  }\n  if (description) properties.description = description;\n  if (timeSpan) {\n    const begin = nodeVal(get1(timeSpan, \"begin\"));\n    const end = nodeVal(get1(timeSpan, \"end\"));\n    properties.timespan = { begin: begin, end: end };\n  }\n  if (timeStamp) {\n    properties.timestamp = nodeVal(get1(timeStamp, \"when\"));\n  }\n  if (iconStyle) {\n    kmlColor(properties, iconStyle, \"icon\");\n    numericProperty(properties, iconStyle, \"scale\", \"icon-scale\");\n    numericProperty(properties, iconStyle, \"heading\", \"icon-heading\");\n\n    const hotspot = get1(iconStyle, \"hotSpot\");\n    if (hotspot) {\n      const left = parseFloat(hotspot.getAttribute(\"x\"));\n      const top = parseFloat(hotspot.getAttribute(\"y\"));\n      if (!isNaN(left) && !isNaN(top)) properties[\"icon-offset\"] = [left, top];\n    }\n    const icon = get1(iconStyle, \"Icon\");\n    if (icon) {\n      const href = nodeVal(get1(icon, \"href\"));\n      if (href) properties.icon = href;\n    }\n  }\n  if (labelStyle) {\n    kmlColor(properties, labelStyle, \"label\");\n    numericProperty(properties, labelStyle, \"scale\", \"label-scale\");\n  }\n  if (lineStyle) {\n    kmlColor(properties, lineStyle, \"stroke\");\n    numericProperty(properties, lineStyle, \"width\", \"stroke-width\");\n  }\n  if (polyStyle) {\n    kmlColor(properties, polyStyle, \"fill\");\n    const fill = nodeVal(get1(polyStyle, \"fill\"));\n    const outline = nodeVal(get1(polyStyle, \"outline\"));\n    if (fill)\n      properties[\"fill-opacity\"] =\n        fill === \"1\" ? properties[\"fill-opacity\"] || 1 : 0;\n    if (outline)\n      properties[\"stroke-opacity\"] =\n        outline === \"1\" ? properties[\"stroke-opacity\"] || 1 : 0;\n  }\n  if (extendedData) {\n    const datas = extendedData.getElementsByTagName(\"Data\"),\n      simpleDatas = extendedData.getElementsByTagName(\"SimpleData\");\n\n    for (i = 0; i < datas.length; i++) {\n      properties[datas[i].getAttribute(\"name\")] = nodeVal(\n        get1(datas[i], \"value\")\n      );\n    }\n    for (i = 0; i < simpleDatas.length; i++) {\n      properties[simpleDatas[i].getAttribute(\"name\")] = nodeVal(simpleDatas[i]);\n    }\n  }\n  if (visibility) {\n    properties.visibility = nodeVal(visibility);\n  }\n  if (geomsAndTimes.coordTimes.length) {\n    properties.coordTimes =\n      geomsAndTimes.coordTimes.length === 1\n        ? geomsAndTimes.coordTimes[0]\n        : geomsAndTimes.coordTimes;\n  }\n  const feature = {\n    type: \"Feature\",\n    geometry:\n      geomsAndTimes.geoms.length === 0\n        ? null\n        : geomsAndTimes.geoms.length === 1\n        ? geomsAndTimes.geoms[0]\n        : {\n            type: \"GeometryCollection\",\n            geometries: geomsAndTimes.geoms,\n          },\n    properties: properties,\n  };\n  if (root.getAttribute(\"id\")) feature.id = root.getAttribute(\"id\");\n  return feature;\n}\n\nexport function* kmlGen(doc) {\n  // styleindex keeps track of hashed styles in order to match feature\n  const styleIndex = {};\n  const styleByHash = {};\n  // stylemapindex keeps track of style maps to expose in properties\n  const styleMapIndex = {};\n  // atomic geospatial types supported by KML - MultiGeometry is\n  // handled separately\n  // all root placemarks in the file\n  const placemarks = doc.getElementsByTagName(\"Placemark\");\n  const styles = doc.getElementsByTagName(\"Style\");\n  const styleMaps = doc.getElementsByTagName(\"StyleMap\");\n\n  for (let k = 0; k < styles.length; k++) {\n    const hash = okhash(xml2str(styles[k])).toString(16);\n    styleIndex[\"#\" + styles[k].getAttribute(\"id\")] = hash;\n    styleByHash[hash] = styles[k];\n  }\n  for (let l = 0; l < styleMaps.length; l++) {\n    styleIndex[\"#\" + styleMaps[l].getAttribute(\"id\")] = okhash(\n      xml2str(styleMaps[l])\n    ).toString(16);\n    const pairs = styleMaps[l].getElementsByTagName(\"Pair\");\n    const pairsMap = {};\n    for (let m = 0; m < pairs.length; m++) {\n      pairsMap[nodeVal(get1(pairs[m], \"key\"))] = nodeVal(\n        get1(pairs[m], \"styleUrl\")\n      );\n    }\n    styleMapIndex[\"#\" + styleMaps[l].getAttribute(\"id\")] = pairsMap;\n  }\n  for (let j = 0; j < placemarks.length; j++) {\n    const feature = getPlacemark(\n      placemarks[j],\n      styleIndex,\n      styleMapIndex,\n      styleByHash\n    );\n    if (feature) yield feature;\n  }\n}\n\nexport function kml(doc) {\n  return {\n    type: \"FeatureCollection\",\n    features: Array.from(kmlGen(doc)),\n  };\n}\n"],"names":["nodeVal","x","normalize","textContent","get1","y","n","getElementsByTagName","length","getLineStyle","extensions","style","lineStyle","color","opacity","parseFloat","width","stroke","isNaN","getMulti","ys","o","k","getProperties","node","prop","getElementsByTagNameNS","i","extension","parentNode","tagName","replace","links","push","Object","assign","href","getAttribute","coordPair","ll","ele","heartRate","time","e","result","coordinates","extendedValues","name","v","getRoute","line","getPoints","type","properties","_gpxType","geometry","pointname","pts","times","c","j","val","plural","Array","fill","getTrack","segments","track","extractedLines","multi","coordTimes","entries","map","gpxGen","doc","tracks","routes","waypoints","feature","EXTENSIONS_NS","TRACKPOINT_ATTRIBUTES","LAP_ATTRIBUTES","attributeNames","tag","alias","elem","elements","lon","lat","alt","a","heartRates","extendedProperties","value","getLap","allExtendedProperties","arr","obj","key","fromEntries","property","tcxGen","laps","removeSpace","trimSpace","splitSpace","okhash","h","charCodeAt","coord1","split","coord","xml2str","undefined","xml","output","attributes","childNodes","nodeName","nodeValue","trim","geotypes","kmlColor","prefix","colorProp","substr","parseInt","numericProperty","source","target","gxCoords","root","elems","coords","timeElems","getPlacemark","styleIndex","styleMapIndex","styleByHash","geomsAndTimes","getGeometry","geomNode","geomNodes","geoms","rings","address","styleUrl","description","timeSpan","timeStamp","extendedData","iconStyle","labelStyle","polyStyle","visibility","styleHash","styleMapHash","normal","begin","end","timespan","timestamp","hotspot","left","top","icon","outline","datas","simpleDatas","geometries","id","kmlGen","placemarks","styles","styleMaps","hash","toString","l","pairs","pairsMap","m","features","from"],"mappings":"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"}